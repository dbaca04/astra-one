---
// Import the base.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "../styles/base.css";
import JsonLdSchema from "./JsonLdSchema.astro";
import { generateWebsiteSchema } from "../utils/schema";

interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = "/og-image.png" } = Astro.props;

// Generate site-wide Schema.org data
const siteUrl = import.meta.env.SITE || "https://domdhi.com";
const siteName = "Domdhi.com";
const logoUrl = "/favicon.svg";
const sameAs = [
	"https://twitter.com/domdhi",
	"https://github.com/domdhi",
	"https://linkedin.com/in/domdhi",
];

const websiteSchema = generateWebsiteSchema({
	siteUrl,
	siteName,
	description,
	logoUrl,
	sameAs,
});
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta
	name="viewport"
	content="width=device-width, initial-scale=1.0, maximum-scale=5.0, viewport-fit=cover"
/>
<meta name="mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-capable" content="yes" />
<meta name="apple-mobile-web-app-status-bar-style" content="default" />
<meta
	name="theme-color"
	content="#ffffff"
	media="(prefers-color-scheme: light)"
/>
<meta
	name="theme-color"
	content="#121212"
	media="(prefers-color-scheme: dark)"
/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
	rel="preload"
	href="/fonts/atkinson-regular.woff"
	as="font"
	type="font/woff"
	crossorigin
/>
<link
	rel="preload"
	href="/fonts/atkinson-bold.woff"
	as="font"
	type="font/woff"
	crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- Schema.org JSON-LD -->
<JsonLdSchema schema={websiteSchema} />

<!-- Theme color change script -->
<script is:inline>
	// Update theme color meta tag when theme changes
	const updateThemeColor = () => {
		const themeColor = document.documentElement.classList.contains("dark")
			? "#121212"
			: "#ffffff";

		// Remove existing theme-color meta tags
		document
			.querySelectorAll('meta[name="theme-color"]')
			.forEach((tag) => tag.remove());

		// Add a new meta tag with the current theme color
		const metaTag = document.createElement("meta");
		metaTag.name = "theme-color";
		metaTag.content = themeColor;
		document.head.appendChild(metaTag);
	};

	// Set up listener for theme changes
	window.addEventListener("DOMContentLoaded", () => {
		updateThemeColor();

		// Create a mutation observer to watch for class changes on the html element
		const observer = new MutationObserver((mutations) => {
			mutations.forEach((mutation) => {
				if (mutation.attributeName === "class") {
					updateThemeColor();
				}
			});
		});

		// Start observing
		observer.observe(document.documentElement, { attributes: true });
	});
</script>
