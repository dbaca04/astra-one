---
/**
 * TableOfContents.astro
 * A component that generates a table of contents from heading elements in a blog post
 */

import {
    parseHeadings,
    addIdsToHeadings,
    generateTocStructure,
    type TocItem,
} from "../utils/tocUtils";

// Define the props for the component
interface Props {
    /**
     * The HTML content of the post as a string
     * This will be parsed to extract headings and build the table of contents
     */
    content: string;

    /**
     * Title for the table of contents section (optional)
     * @default "Table of Contents"
     */
    title?: string;

    /**
     * Which heading levels to include (optional)
     * @default [2, 3] (h2 and h3 elements)
     */
    headingLevels?: number[];

    /**
     * Whether to show the component on mobile or make it toggleable (optional)
     * @default true (always show)
     */
    showOnMobile?: boolean;
}

// Get the props with defaults
const {
    content,
    title = "Table of Contents",
    headingLevels = [2, 3],
    showOnMobile = true,
} = Astro.props;

// Parse the content to extract headings
const headings = parseHeadings(content, headingLevels);

// Generate hierarchical TOC structure
const tocStructure = generateTocStructure(headings);

// Determine if we should render the toggle button based on showOnMobile prop
const renderToggle = !showOnMobile;

// Recursive function to render TOC items
const renderTocItems = (items: TocItem[]) => {
    return items
        .map((item) => {
            const { heading, children } = item;
            return `<li class="level-${heading.level}">
            <a href="#${heading.id}" class="toc-link">${heading.text}</a>
            ${children.length > 0 ? `<ul>${renderTocItems(children)}</ul>` : ""}
        </li>`;
        })
        .join("");
};
---

{
    headings.length > 0 && (
        <div class="table-of-contents-container">
            {renderToggle && (
                <button id="toc-toggle" aria-expanded="false">
                    <span>{title}</span>
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        width="20"
                        height="20"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        class="toc-icon"
                    >
                        <polyline points="6 9 12 15 18 9" />
                    </svg>
                </button>
            )}

            <div
                class={`table-of-contents ${renderToggle ? "collapsible" : ""}`}
                id="toc-content"
            >
                {!renderToggle && <h2 class="toc-title">{title}</h2>}
                <nav>
                    <ul>
                        <Fragment set:html={renderTocItems(tocStructure)} />
                    </ul>
                </nav>
            </div>
        </div>
    )
}

<style>
    .table-of-contents-container {
        margin: 2rem 0;
        border: 1px solid var(--theme-border);
        border-radius: 8px;
        background-color: var(--theme-bg-offset);
        transition: var(--theme-transition);
    }

    .toc-title {
        font-size: 1.2rem;
        margin: 0 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--theme-border);
    }

    .table-of-contents {
        padding: 1.5rem;
    }

    .table-of-contents.collapsible {
        display: none;
    }

    .table-of-contents.collapsible.expanded {
        display: block;
    }

    #toc-toggle {
        width: 100%;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border: none;
        background: none;
        font-size: 1.2rem;
        font-weight: 500;
        padding: 1rem 1.5rem;
        cursor: pointer;
        color: var(--theme-text);
        transition: var(--theme-transition);
        text-align: left;
    }

    #toc-toggle:hover {
        background-color: var(--theme-bg-accent);
    }

    #toc-toggle .toc-icon {
        transition: transform 0.2s ease;
    }

    #toc-toggle[aria-expanded="true"] .toc-icon {
        transform: rotate(180deg);
    }

    .table-of-contents nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .table-of-contents nav li {
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .table-of-contents nav li ul {
        margin-top: 0.5rem;
        margin-left: 1.5rem;
    }

    .table-of-contents nav li.level-3 {
        margin-left: 1.5rem;
        font-size: 0.95em;
    }

    .toc-link {
        color: var(--theme-text);
        text-decoration: none;
        opacity: 0.85;
        transition: var(--theme-transition);
        display: inline-block;
        padding: 0.2rem 0.4rem;
        border-radius: 4px;
    }

    .toc-link:hover {
        opacity: 1;
        background-color: var(--theme-bg-accent);
    }

    .toc-link.active {
        font-weight: 500;
        opacity: 1;
        background-color: var(--theme-bg-accent);
    }

    /* Responsive styles */
    @media (max-width: 768px) {
        .table-of-contents-container {
            margin: 1.5rem 0;
        }

        .table-of-contents {
            padding: 1.2rem;
        }

        #toc-toggle {
            padding: 0.8rem 1.2rem;
            font-size: 1.1rem;
        }
    }

    @media (max-width: 480px) {
        .table-of-contents-container {
            margin: 1.2rem 0;
        }

        .table-of-contents {
            padding: 1rem;
        }

        #toc-toggle {
            padding: 0.7rem 1rem;
            font-size: 1rem;
        }
    }
</style>

<script>
    // Initialize the toggle functionality for collapsible TOC on mobile
    function initializeTocToggle() {
        const toggleButton = document.getElementById("toc-toggle");
        const tocContent = document.getElementById("toc-content");

        if (toggleButton && tocContent) {
            toggleButton.addEventListener("click", () => {
                const isExpanded =
                    toggleButton.getAttribute("aria-expanded") === "true";
                toggleButton.setAttribute(
                    "aria-expanded",
                    isExpanded ? "false" : "true",
                );
                tocContent.classList.toggle("expanded");
            });
        }
    }

    // Add active class to the current section in TOC
    function initializeActiveSection() {
        const tocLinks = document.querySelectorAll(".toc-link");

        if (tocLinks.length > 0) {
            // Track which heading is currently visible
            const observeHeadings = () => {
                const headingElements = Array.from(tocLinks)
                    .map((link) => {
                        const id = link.getAttribute("href")?.substring(1);
                        return id ? document.getElementById(id) : null;
                    })
                    .filter((el): el is HTMLElement => el !== null);

                if (headingElements.length === 0) return;

                const observer = new IntersectionObserver(
                    (entries) => {
                        entries.forEach((entry) => {
                            if (entry.isIntersecting) {
                                // Remove active class from all links
                                tocLinks.forEach((link) =>
                                    link.classList.remove("active"),
                                );

                                // Add active class to the link that corresponds to the visible heading
                                const activeLink = document.querySelector(
                                    `.toc-link[href="#${entry.target.id}"]`,
                                );
                                if (activeLink) {
                                    activeLink.classList.add("active");
                                }
                            }
                        });
                    },
                    { rootMargin: "-80px 0px -80% 0px" },
                );

                headingElements.forEach((el) => observer.observe(el));
            };

            // Enable smooth scrolling for TOC links
            tocLinks.forEach((link) => {
                link.addEventListener("click", (e) => {
                    e.preventDefault();
                    const targetId = link.getAttribute("href");
                    if (!targetId) return;

                    const targetElement = document.querySelector(
                        targetId,
                    ) as HTMLElement;
                    if (targetElement) {
                        window.scrollTo({
                            top: targetElement.offsetTop - 80, // Add offset for fixed header
                            behavior: "smooth",
                        });

                        // Update URL hash without page jump
                        history.pushState(null, "", targetId);
                    }
                });
            });

            // Initialize intersection observer for headings
            observeHeadings();
        }
    }

    // Initialize both toggle and active section functionality
    document.addEventListener("DOMContentLoaded", () => {
        initializeTocToggle();
        initializeActiveSection();
    });
</script>
