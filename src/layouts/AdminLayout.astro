---
import Sidebar from "../components/admin/Sidebar.astro";
import "../styles/base.css";
import BaseHead from "../components/BaseHead.astro";
import type { Props as BaseHeadProps } from "../components/BaseHead.astro";
import Breadcrumbs from "../components/admin/Breadcrumbs.astro";
import {
    generateBreadcrumbs,
    type TitleMappings,
    type DynamicTitleFn,
} from "../utils/breadcrumbs";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";

// Props for AdminLayout itself, which can include BaseHeadProps
export interface AdminLayoutProps extends BaseHeadProps {
    // adminTitle is specific to AdminLayout to avoid conflict with BaseHead's title
    adminTitle?: string;
}

const {
    adminTitle, // Use adminTitle for the page, fall back to a default
    // Destructure all BaseHeadProps to pass them through
    title: baseHeadTitle, // This is the title prop for BaseHead/SEO
    description,
    image,
    article,
    publishDate,
    modifiedDate,
    tags,
    author,
    noindex,
    nofollow,
    allowCrawling, // Added allowCrawling as it's a prop of BaseHead
    structuredData,
} = Astro.props as AdminLayoutProps;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const titleMappings: TitleMappings = {
    "/admin": "Dashboard",
    "/admin/content": "Content Management",
    "/admin/content/posts": "Posts",
    "/admin/content/edit": "Edit",
    "/admin/settings": "Settings",
};

const getDynamicTitle: DynamicTitleFn = async (
    segment,
    currentPath,
    fullPathname,
) => {
    if (currentPath.startsWith("/admin/content/edit/") && segment !== "edit") {
        return segment
            .replace(/-/g, " ")
            .split(" ")
            .map((w) => w.charAt(0).toUpperCase() + w.slice(1))
            .join(" ");
    }
    return null;
};

const breadcrumbItems = await generateBreadcrumbs(
    Astro.url.pathname,
    titleMappings,
    "/admin",
    getDynamicTitle,
);

// Determine the title for the <title> tag and for BaseHead
const pageTitle =
    adminTitle ||
    (breadcrumbItems.length > 1
        ? breadcrumbItems[breadcrumbItems.length - 1].text
        : "Admin");
const finalSeoTitle = `${baseHeadTitle || pageTitle} | Admin Dashboard | ${SITE_TITLE}`;
const finalSeoDescription = description || SITE_DESCRIPTION;
---

<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>{pageTitle} | Admin | {SITE_TITLE}</title>
        {/* Use pageTitle for the HTML title tag */}
        <meta name="robots" content="noindex, nofollow" />
        {/* Default for admin */}
        <script is:inline>
            const theme = (() => {
                if (
                    typeof localStorage !== "undefined" &&
                    localStorage.getItem("theme")
                ) {
                    return localStorage.getItem("theme");
                }
                if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                    return "dark";
                }
                return "light";
            })();

            if (theme === "dark") {
                document.documentElement.classList.add("dark");
            }

            window.onload = () => {
                const themeToggle = document.getElementById("themeToggle");
                if (themeToggle) {
                    themeToggle.addEventListener("click", () => {
                        const currentTheme =
                            document.documentElement.classList.contains("dark")
                                ? "dark"
                                : "light";
                        const newTheme =
                            currentTheme === "dark" ? "light" : "dark";
                        document.documentElement.classList.remove(
                            currentTheme === "dark" ? "dark" : "light",
                        );
                        document.documentElement.classList.add(newTheme);
                        localStorage.setItem("theme", newTheme);
                        updateIcon(newTheme);
                    });
                    updateIcon(
                        document.documentElement.classList.contains("dark")
                            ? "dark"
                            : "light",
                    );
                }
            };

            function updateIcon(theme) {
                const themeToggle = document.getElementById("themeToggle");
                if (!themeToggle) return;

                const sunIcon = themeToggle.querySelector(".sun-icon");
                const moonIcon = themeToggle.querySelector(".moon-icon");

                if (sunIcon && moonIcon) {
                    if (theme === "dark") {
                        sunIcon.classList.add("hidden");
                        moonIcon.classList.remove("hidden");
                        themeToggle.setAttribute(
                            "aria-label",
                            "Switch to Light Mode",
                        );
                    } else {
                        sunIcon.classList.remove("hidden");
                        moonIcon.classList.add("hidden");
                        themeToggle.setAttribute(
                            "aria-label",
                            "Switch to Dark Mode",
                        );
                    }
                }
            }
        </script>
        <BaseHead
            title={finalSeoTitle}
            description={finalSeoDescription}
            image={image}
            article={article}
            publishDate={publishDate}
            modifiedDate={modifiedDate}
            tags={tags}
            author={author}
            noindex={noindex ?? true}
            nofollow={nofollow ?? true}
            allowCrawling={allowCrawling ?? false}
            structuredData={structuredData}
        />
    </head>
    <body class="bg-theme-bg text-theme-text flex">
        <Sidebar />
        <main class="flex-1 p-6">
            <div class="flex justify-end mb-4">
                <button
                    id="themeToggle"
                    class="p-2 rounded-full text-theme-header-text hover:bg-theme-selection-bg focus:outline-none focus:ring-2 focus:ring-theme-accent focus:ring-offset-2 focus:ring-offset-theme-bg transition-colors duration-200"
                    aria-label="Switch to Dark Mode"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="sun-icon block dark:hidden h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        stroke-width="2"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M12 3v1m0 16v1m8.66-8.66l-.707.707M4.04 4.04l-.707.707M21 12h-1M4 12H3m15.66 8.66l-.707-.707M4.747 19.953l-.707-.707M12 5a7 7 0 100 14 7 7 0 000-14z"
                        ></path>
                    </svg>
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="moon-icon hidden dark:block h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        stroke-width="2"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
                        ></path>
                    </svg>
                    <span class="sr-only">Switch Theme</span>
                </button>
            </div>
            <Breadcrumbs items={breadcrumbItems} />
            <slot />
        </main>
        <style is:global>
            /* Additional global styles for admin if needed */
        </style>
    </body>
</html>
