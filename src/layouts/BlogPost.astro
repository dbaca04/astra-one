---
import type { CollectionEntry } from "astro:content";
import { getCollection } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import TableOfContents from "../components/TableOfContents.astro";
import Breadcrumbs from "../components/Breadcrumbs.astro";
import { ViewTransitions } from "astro:transitions";
import { Picture } from "astro:assets";
import "../styles/base.css";
import "../styles/transitions.css";
import {
	getRelatedPosts,
	type PostFrontmatter,
	type Post as PostForUtil,
	type RelatedPost,
} from "../utils/relatedPosts";
import { generateBlogPostSchema } from "../utils/schema";
// @ts-ignore - Component exists but TypeScript doesn't recognize it
import RelatedPosts from "../components/RelatedPosts.astro";

const frontmatterProps = Astro.props as CollectionEntry<"blog">["data"];

// Define these early as they are used in the template regardless of related posts
const displayImage = frontmatterProps.heroImage;
const articleContent = await Astro.slots.render("default");

let relatedPostsData: RelatedPost[] = [];
const currentSlugFromParams = Astro.params.slug;

if (
	typeof currentSlugFromParams === "string" &&
	currentSlugFromParams.length > 0
) {
	const actualCurrentSlug = currentSlugFromParams;
	const allBlogEntries = await getCollection("blog");

	const allPostsForUtil: PostForUtil[] = allBlogEntries.map((entry) => ({
		frontmatter: {
			title: entry.data.title,
			date: new Date(entry.data.date),
			slug: entry.id,
			description: entry.data.description,
			category: entry.data.category as string | undefined,
			tags: entry.data.tags,
			heroImage: entry.data.heroImage,
		},
		url: `/blog/${entry.id}/`,
	}));

	const currentPostFrontmatter: PostFrontmatter = {
		slug: actualCurrentSlug,
		title: frontmatterProps.title,
		description: frontmatterProps.description,
		date: new Date(frontmatterProps.date),
		category: frontmatterProps.category as string | undefined,
		tags: frontmatterProps.tags,
		heroImage: frontmatterProps.heroImage,
	};

	const currentPostForUtil: PostForUtil = {
		frontmatter: currentPostFrontmatter,
		url: Astro.url.pathname,
	};

	relatedPostsData = getRelatedPosts(currentPostForUtil, allPostsForUtil, 3);
} else {
	console.warn(
		"Related posts: Current page slug is undefined or invalid. Skipping related posts.",
	);
}

// Generate Schema.org JSON-LD structured data
const siteUrl = import.meta.env.SITE || "https://domdhi.com";
const siteName = "Domdhi.com";
const logoUrl = "/favicon.svg";

// Handle the heroImage which might be complex or a string
let heroImageSrc = "";
if (frontmatterProps.heroImage) {
	if (typeof frontmatterProps.heroImage === "string") {
		heroImageSrc = frontmatterProps.heroImage;
	} else if (typeof frontmatterProps.heroImage === "object") {
		// Try to get src property if it exists
		heroImageSrc = (frontmatterProps.heroImage as any).src || "";
	}
}

const blogPostSchema = generateBlogPostSchema({
	title: frontmatterProps.title,
	description: frontmatterProps.description,
	publishDate: new Date(frontmatterProps.date),
	updateDate: frontmatterProps.updatedDate
		? new Date(frontmatterProps.updatedDate)
		: undefined,
	author: frontmatterProps.author || "Domdhi",
	slug: currentSlugFromParams as string,
	tags: frontmatterProps.tags,
	image: heroImageSrc,
	imageAlt: frontmatterProps.title,
	siteUrl,
	siteName,
	logoUrl,
});

// Custom title mappings for blog breadcrumbs
const blogTitleMappings = {
	blog: "Blog",
	// Add more mappings as needed
};
---

<html lang="en">
	<head>
		<BaseHead
			title={frontmatterProps.title}
			description={frontmatterProps.description}
			image={heroImageSrc}
			article={true}
			publishDate={new Date(frontmatterProps.date)}
			modifiedDate={frontmatterProps.updatedDate
				? new Date(frontmatterProps.updatedDate)
				: undefined}
			tags={frontmatterProps.tags}
			author={frontmatterProps.author || "Domdhi"}
			structuredData={blogPostSchema}
		/>
		<ViewTransitions />
	</head>

	<body
		class="bg-theme-bg text-theme-text transition-theme min-h-screen flex flex-col bg-[linear-gradient(var(--gray-gradient))] bg-no-repeat bg-[length:100%_600px]"
	>
		<Header />
		<main class="flex-1 w-full max-w-full mx-0">
			<div class="max-w-[1020px] mx-auto px-4 md:px-6">
				<Breadcrumbs titleMappings={blogTitleMappings} />
			</div>

			<article>
				{
					displayImage && (
						<div
							class="w-full max-h-[70vh] overflow-hidden mb-6 md:mb-8"
							transition:name={`hero-image-${currentSlugFromParams}`}
						>
							<Picture
								src={displayImage}
								alt={frontmatterProps.title}
								width={1020}
								height={510}
								formats={["avif", "webp", "jpeg"]}
								quality={80}
								sizes="(max-width: 720px) 100vw, 1020px"
								fit="cover"
								position="center"
								layout="constrained"
								class="mx-auto rounded-xl shadow-DEFAULT"
							/>
						</div>
					)
				}

				<div
					class="max-w-[720px] mx-auto px-4 md:px-6 text-theme-text transition-theme xl:max-w-5xl"
				>
					<div class="mb-6 md:mb-8 py-4 md:py-6 text-center">
						<div
							class="text-theme-text opacity-80 text-sm md:text-base mb-2"
						>
							<FormattedDate
								date={new Date(frontmatterProps.date)}
							/>
							{
								frontmatterProps.updatedDate && (
									<div class="italic mt-1">
										Last updated on{" "}
										<FormattedDate
											date={
												new Date(
													frontmatterProps.updatedDate,
												)
											}
										/>
									</div>
								)
							}
						</div>

						<h1
							class="text-3xl md:text-4xl lg:text-5xl font-bold mb-4 leading-tight"
							transition:animate="slide"
							transition:name={`title-${currentSlugFromParams}`}
						>
							{frontmatterProps.title}
						</h1>

						<hr
							class="border-0 border-t-2 border-theme-border my-4 w-1/2 mx-auto transition-theme"
						/>

						{
							frontmatterProps.tags &&
								frontmatterProps.tags.length > 0 && (
									<div class="flex flex-wrap gap-2 justify-center mt-4 text-sm text-theme-text opacity-80">
										{frontmatterProps.tags.map((tag) => (
											<span class="inline-block px-2 py-1 bg-theme-code-bg rounded-md transition-theme">
												#{tag}
											</span>
										))}
									</div>
								)
						}
					</div>

					<div class="flex flex-col xl:flex-row xl:gap-8">
						{/* Table of Contents for desktop and larger screens */}
						<div
							class="xl:w-64 xl:flex-shrink-0 xl:self-start mb-8 xl:mb-0 xl:h-fit xl:sticky xl:top-8"
						>
							<TableOfContents
								content={articleContent}
								headingLevels={[2, 3]}
								showOnMobile={false}
							/>
						</div>

						<div
							class="flex-1 prose dark:prose-invert max-w-none"
							transition:animate="fade"
						>
							<slot />
						</div>
					</div>
				</div>
			</article>

			{
				relatedPostsData && relatedPostsData.length > 0 && (
					<div
						class="max-w-[720px] mx-auto px-4 md:px-6 mt-8 mb-8"
						transition:animate="slide"
					>
						<RelatedPosts relatedPosts={relatedPostsData} />
					</div>
				)
			}
		</main>
		<Footer />
		<script type="module">
			// Use older version of mermaid (10.x) for better compatibility
			import mermaid from "https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs";

			// Initialize mermaid with a more compatible config
			mermaid.initialize({
				startOnLoad: true,
				theme: "default",
				securityLevel: "loose",
			});

			// Function to render charts that might be added dynamically
			function renderMermaidCharts() {
				if (typeof mermaid !== "undefined") {
					try {
						const mermaidElements =
							document.querySelectorAll("div.mermaid");
						if (mermaidElements.length > 0) {
							mermaid.run({
								nodes: mermaidElements,
							});
						}
					} catch (e) {
						console.error("Error rendering Mermaid charts:", e);
					}
				}
			}

			// Render on page load
			if (document.readyState === "complete") {
				renderMermaidCharts();
			} else {
				window.addEventListener("load", renderMermaidCharts);
			}

			// Re-render on Astro page transitions
			document.addEventListener("astro:page-load", renderMermaidCharts);
		</script>
	</body>
</html>
