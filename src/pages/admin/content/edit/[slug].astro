---
import AdminLayout from "../../../../layouts/AdminLayout.astro";
import { getEntry, type CollectionEntry } from "astro:content";
import fs from "node:fs/promises";
import path from "node:path";
import yaml from "js-yaml";
import matter from "gray-matter";
import { marked } from "marked";
import DOMPurify from "dompurify";

// Authentication Check
const sessionCookie = Astro.cookies.get("session");
if (!sessionCookie || sessionCookie.value !== "admin") {
    return Astro.redirect("/admin/login", 302);
}

export const prerender = false;

const { slug: urlSlugParam } = Astro.params; // urlSlugParam can be undefined
const urlSlug = urlSlugParam ?? null; // Now urlSlug is string | null

const contentType = Astro.url.searchParams.get("type") || "draft";

let frontmatter: Record<string, any> = {};
let body = "";
let error: string | null = null;
let actualFileSlugForSaving: string | null = urlSlug;
let isPublishedContent = contentType === "published";

if (urlSlug) {
    if (isPublishedContent) {
        try {
            const postEntry = await getEntry("blog", urlSlug);
            if (postEntry) {
                frontmatter = postEntry.data as Record<string, any>;
                const blogContentDir = path.join(
                    process.cwd(),
                    "src/content/blog",
                );
                let foundFilePath: string | null = null; // Explicitly typed
                const possibleExtensions = [".md", ".mdx"];
                for (const ext of possibleExtensions) {
                    const testPath = path.join(
                        blogContentDir,
                        `${urlSlug}${ext}`,
                    );
                    try {
                        await fs.access(testPath);
                        foundFilePath = testPath;
                        break;
                    } catch {
                        // File not found
                    }
                }

                if (foundFilePath) {
                    const rawFileContent = await fs.readFile(
                        foundFilePath,
                        "utf-8",
                    );
                    const parsedFile = matter(rawFileContent);
                    frontmatter = parsedFile.data || {};
                    body = parsedFile.content.trim();
                } else {
                    error = `Published post file for slug '${urlSlug}' not found in src/content/blog/.`;
                    Astro.response.status = 404;
                }
            } else {
                error = `Published post with slug '${urlSlug}' not found.`;
                Astro.response.status = 404;
            }
        } catch (e: any) {
            console.error(`Error fetching published post '${urlSlug}':`, e);
            error = `Error loading published post: ${e.message}`;
            Astro.response.status = 500;
        }
    } else {
        const draftsDir = path.join(process.cwd(), "src/content/drafts");
        let matchedFileContent: {
            fm: Record<string, any>;
            contentBody: string;
            filenameSlug: string;
        } | null = null;

        try {
            const filesInDrafts = await fs.readdir(draftsDir);
            let primaryMatch: any = null;
            let fallbackMatch: any = null;

            for (const filenameInDir of filesInDrafts) {
                if (
                    !filenameInDir.endsWith(".md") &&
                    !filenameInDir.endsWith(".mdx")
                ) {
                    continue;
                }
                const currentFilePath = path.join(draftsDir, filenameInDir);
                let rawFileContent = await fs
                    .readFile(currentFilePath, "utf-8")
                    .catch(() => "");
                if (!rawFileContent) continue;

                const parsedFile = matter(rawFileContent);
                const currentFileFM = parsedFile.data || {};
                const currentFileBody = parsedFile.content.trim();
                const currentFilenameSlug = filenameInDir.replace(
                    /\.(md|mdx)$/,
                    "",
                );

                if (currentFileFM.slug && currentFileFM.slug === urlSlug) {
                    primaryMatch = {
                        fm: currentFileFM,
                        contentBody: currentFileBody,
                        filenameSlug: currentFilenameSlug,
                    };
                    break;
                }
                if (
                    currentFilenameSlug === urlSlug &&
                    (!currentFileFM.slug ||
                        currentFileFM.slug === currentFilenameSlug) &&
                    !fallbackMatch
                ) {
                    fallbackMatch = {
                        fm: currentFileFM,
                        contentBody: currentFileBody,
                        filenameSlug: currentFilenameSlug,
                    };
                }
            }

            matchedFileContent = primaryMatch || fallbackMatch;

            if (matchedFileContent) {
                frontmatter = matchedFileContent.fm;
                body = matchedFileContent.contentBody;
                actualFileSlugForSaving = matchedFileContent.filenameSlug;
            } else {
                error = `Draft matching URL slug '${urlSlug}' not found.`;
                Astro.response.status = 404;
            }
        } catch (dirError: any) {
            error = `Server error accessing drafts: ${dirError.message}`;
            Astro.response.status = 500;
        }
    }
} else {
    error = "No slug provided.";
    Astro.response.status = 400;
}

console.log(
    `Editing page for URL slug: ${urlSlug}, Content Type: ${contentType}, Resolved slug for saving: ${actualFileSlugForSaving}, Is Published: ${isPublishedContent}`,
);

let clientVarsFrontmatter: Record<string, string | boolean | number | null> =
    {};
if (frontmatter && typeof frontmatter === "object") {
    for (const [key, value] of Object.entries(frontmatter)) {
        if (value instanceof Date) {
            clientVarsFrontmatter[key] = value.toISOString();
        } else {
            clientVarsFrontmatter[key] = value;
        }
    }
}
---

<AdminLayout
    title={`Edit ${isPublishedContent ? "Published Post" : "Draft"}: ${urlSlug ?? "New"}`}
>
    <!-- Add CDN links for marked and DOMPurify in the head -->
    <script is:inline src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"
    ></script>
    <script
        is:inline
        src="https://cdn.jsdelivr.net/npm/dompurify@3.0.6/dist/purify.min.js"
    ></script>

    <div class="container px-4 py-8">
        <h1 class="text-3xl font-bold mb-6">
            Edit {isPublishedContent ? "Published Post" : "Draft"}: {
                urlSlug ?? "New"
            }
        </h1>
        {
            error && (
                <div
                    class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4"
                    role="alert"
                >
                    <strong class="font-bold">Error!</strong>
                    <span class="block sm:inline"> {error}</span>
                </div>
            )
        }
        {
            !error && actualFileSlugForSaving && (
                <form
                    id="editForm"
                    class="bg-theme-card-bg p-6 rounded-lg shadow-md"
                >
                    <h2 class="text-2xl font-semibold mb-4">Frontmatter</h2>
                    {Object.entries(frontmatter).map(([key, value]) => (
                        <div class="mb-4">
                            <label
                                for={key}
                                class="block text-sm font-medium text-theme-text capitalize"
                            >
                                {key.replace(/([A-Z])/g, " $1")}
                            </label>
                            {key === "draft" && isPublishedContent ? (
                                <>
                                    <input
                                        type="checkbox"
                                        id={key}
                                        name={key}
                                        checked={Boolean(value)}
                                        disabled
                                        class="mt-1 h-5 w-5 text-theme-accent border-theme-border rounded focus:ring-theme-accent disabled:opacity-50"
                                    />
                                    <p class="text-xs text-theme-text-muted mt-1">
                                        The 'draft' status of a published post
                                        is managed via publish/unpublish
                                        actions.
                                    </p>
                                </>
                            ) : typeof value === "boolean" ? (
                                <input
                                    type="checkbox"
                                    id={key}
                                    name={key}
                                    checked={Boolean(value)}
                                    class="mt-1 h-5 w-5 text-theme-accent border-theme-border rounded focus:ring-theme-accent"
                                />
                            ) : typeof value === "number" ? (
                                <input
                                    type="number"
                                    id={key}
                                    name={key}
                                    value={value}
                                    class="mt-1 block w-full px-3 py-2 border border-theme-border rounded-md shadow-sm bg-theme-bg focus:ring-theme-accent focus:border-theme-accent"
                                />
                            ) : (
                                <input
                                    type="text"
                                    id={key}
                                    name={key}
                                    value={
                                        key === "tags" && Array.isArray(value)
                                            ? value.join(", ")
                                            : String(value ?? "")
                                    }
                                    class="mt-1 block w-full px-3 py-2 border border-theme-border rounded-md shadow-sm bg-theme-bg focus:ring-theme-accent focus:border-theme-accent"
                                />
                            )}
                        </div>
                    ))}
                    <div id="content-body-section" class="mb-8">
                        <h2 class="text-2xl font-semibold mb-4">Content Body</h2>

                        <!-- Markdown Editor Toolbar -->
                        <div id="markdown-toolbar" class="mb-2 flex items-center space-x-2 p-2 border border-theme-border rounded-md bg-theme-bg-alt">
                            <button type="button" id="toolbar-bold" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Bold">B</button>
                            <button type="button" id="toolbar-italic" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Italic">I</button>
                            <button type="button" id="toolbar-h1" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Heading 1">H1</button>
                            <button type="button" id="toolbar-h2" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Heading 2">H2</button>
                            <button type="button" id="toolbar-h3" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Heading 3">H3</button>
                            <button type="button" id="toolbar-ul" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Unordered List">UL</button>
                            <button type="button" id="toolbar-ol" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Ordered List">OL</button>
                            <button type="button" id="toolbar-link" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Link">Link</button>
                            <button type="button" id="toolbar-image" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Image">Image</button>
                            <button type="button" id="toolbar-codeblock" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Code Block">Code</button>
                            <button type="button" id="toolbar-blockquote" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Blockquote">Quote</button>
                            <button type="button" id="toolbar-help" class="px-2 py-1 border border-theme-border rounded hover:bg-theme-bg text-theme-text" title="Markdown Help">Help</button>
                            <!-- More buttons will be added in subsequent tasks -->
                        </div>

                        <div
                            id="split-screen-editor-container"
                            class="mb-6 flex flex-col md:flex-row md:space-x-4"
                        >
                            {/* Left Pane: Markdown Editor */}
                            <div class="md:w-1/2 w-full mb-4 md:mb-0">
                                <label
                                    for="body"
                                    class="block text-sm font-medium text-theme-text mb-1"
                                >
                                    Markdown Input
                                </label>
                                <textarea
                                    id="body"
                                    name="body"
                                    rows="25"
                                    class="mt-1 block w-full h-full px-3 py-2 border border-theme-border rounded-md shadow-sm bg-theme-bg focus:ring-theme-accent focus:border-theme-accent resize-none"
                                    set:text={body}
                                >
                                </textarea>
                            </div>
                            {/* Right Pane: HTML Preview */}
                            <div class="md:w-1/2 w-full">
                                <label
                                    for="preview"
                                    class="block text-sm font-medium text-theme-text mb-1"
                                >
                                    Live Preview
                                </label>
                                <div
                                    id="preview"
                                    class="mt-1 block w-full h-full px-3 py-2 border border-theme-border rounded-md shadow-sm bg-theme-bg overflow-y-auto prose dark:prose-invert max-w-none"
                                    style="min-height: 500px;"
                                >
                                    {/* Preview content will be injected here by JavaScript */}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="flex items-center justify-between mt-6">
                        <button
                            type="submit"
                            id="saveButton"
                            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                        >
                            Save Changes
                        </button>
                        <button
                            type="button"
                            id="aiSuggestButton"
                            class="bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                        >
                            Get AI Suggestions
                        </button>
                    </div>
                </form>
            )
        }
        <div
            id="aiSuggestionsArea"
            class="mt-6 p-4 border border-theme-border rounded-lg bg-theme-card-bg shadow-md hidden"
        >
            <h3 class="text-xl font-semibold mb-2">AI Suggestions:</h3>
            <p id="aiSuggestionsText" class="text-theme-text-muted"></p>
        </div>
        <p class="mt-4">Raw URL slug: <code>{urlSlug ?? "N/A"}</code></p>
        {
            actualFileSlugForSaving && (
                <p class="mt-1">
                    Effective slug for saving:{" "}
                    <code>{actualFileSlugForSaving}</code> ({contentType})
                </p>
            )
        }
        <div id="feedbackMessage" class="mt-4"></div>
    </div>
</AdminLayout>

<script
    define:vars={{
        slugToSave: actualFileSlugForSaving ?? "",
        contentType: contentType,
        initialFrontmatter: clientVarsFrontmatter,
    }}
>
    const form = document.getElementById("editForm");
    const saveButton = document.getElementById("saveButton");
    const feedbackMessage = document.getElementById("feedbackMessage");
    const aiSuggestButton = document.getElementById("aiSuggestButton");
    const aiSuggestionsArea = document.getElementById("aiSuggestionsArea");
    const aiSuggestionsText = document.getElementById("aiSuggestionsText");
    const markdownInput = document.getElementById("body"); // Markdown textarea
    const htmlPreview = document.getElementById("preview"); // Preview div

    // Toolbar buttons
    const toolbarBold = document.getElementById("toolbar-bold");
    const toolbarItalic = document.getElementById("toolbar-italic");
    const toolbarH1 = document.getElementById("toolbar-h1");
    const toolbarH2 = document.getElementById("toolbar-h2");
    const toolbarH3 = document.getElementById("toolbar-h3");
    const toolbarUL = document.getElementById("toolbar-ul");
    const toolbarOL = document.getElementById("toolbar-ol");
    const toolbarLink = document.getElementById("toolbar-link");
    const toolbarImage = document.getElementById("toolbar-image");
    const toolbarCodeBlock = document.getElementById("toolbar-codeblock");
    const toolbarBlockquote = document.getElementById("toolbar-blockquote");
    const toolbarHelp = document.getElementById("toolbar-help");

    // Debounce function
    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => {
                func.apply(this, args);
            }, delay);
        };
    }

    // Function to update preview
    function updatePreview() {
        console.log("updatePreview called");

        if (typeof marked === "undefined") {
            console.error("marked library is not loaded!");
            if (htmlPreview instanceof HTMLElement)
                htmlPreview.textContent =
                    "Error: Markdown library (marked) not loaded.";
            return;
        }
        if (typeof DOMPurify === "undefined") {
            console.error("DOMPurify library is not loaded!");
            if (htmlPreview instanceof HTMLElement)
                htmlPreview.textContent =
                    "Error: Sanitizer library (DOMPurify) not loaded.";
            return;
        }

        if (
            markdownInput instanceof HTMLTextAreaElement &&
            htmlPreview instanceof HTMLElement
        ) {
            const markdownText = markdownInput.value;
            console.log("Markdown text length:", markdownText.length);
            try {
                const parseResult = marked.parse(markdownText);
                console.log("marked.parse result type:", typeof parseResult);

                const processHtml = (htmlContent) => {
                    console.log(
                        "processHtml called with type:",
                        typeof htmlContent,
                    );
                    if (typeof htmlContent === "string") {
                        try {
                            htmlPreview.innerHTML =
                                DOMPurify.sanitize(htmlContent);
                            console.log("Preview updated successfully.");
                        } catch (sanitizeError) {
                            console.error(
                                "Error during DOMPurify.sanitize:",
                                sanitizeError,
                            );
                            htmlPreview.textContent =
                                "Error: Sanitization failed.";
                        }
                    } else {
                        console.error(
                            "Processed HTML content is not a string:",
                            htmlContent,
                        );
                        htmlPreview.textContent =
                            "Error: Preview could not be generated (invalid HTML content type).";
                    }
                };

                if (parseResult && typeof parseResult.then === "function") {
                    console.log(
                        "Handling async marked.parse result (Promise).",
                    );
                    // Handle if marked.parse returns a Promise (async usage)
                    parseResult
                        .then((html) => {
                            console.log("Async marked.parse resolved.");
                            processHtml(html);
                        })
                        .catch((err) => {
                            console.error(
                                "Error in async marked.parse:",
                                err,
                            );
                            htmlPreview.textContent =
                                "Error: Markdown parsing failed (async).";
                        });
                } else {
                    console.log(
                        "Handling sync marked.parse result (string or other).",
                    );
                    // Handle if marked.parse returns a string directly (sync usage)
                    processHtml(parseResult);
                }
            } catch (e) {
                console.error("Error during markdown parsing or sanitization:", e);
                if (htmlPreview instanceof HTMLElement)
                    htmlPreview.textContent = "Error: Preview generation failed.";
            }
        }
    }

    // Debounced preview update
    const debouncedUpdatePreview = debounce(updatePreview, 300);

    // Event listener for markdown input
    if (markdownInput) {
        markdownInput.addEventListener("input", () => {
            console.log("Markdown input event fired.");
            debouncedUpdatePreview();
        });
        // Initial preview on page load
        updatePreview(); 
    }

    // Helper function to apply markdown formatting
    function applyMarkdownFormatting(prefix, suffix, placeholder = "text") {
        if (!(markdownInput instanceof HTMLTextAreaElement)) return;

        const start = markdownInput.selectionStart;
        const end = markdownInput.selectionEnd;
        const value = markdownInput.value;

        const textBeforeSelection = value.substring(0, start);
        const textAfterSelection = value.substring(end);
        const originalSelectedText = value.substring(start, end);

        if (originalSelectedText && originalSelectedText.trim() !== "") {
            // Selection exists and is not just whitespace
            const coreText = originalSelectedText.trim();
            const leadingSpaceInSelection = originalSelectedText.substring(0, originalSelectedText.indexOf(coreText));
            const trailingSpaceInSelection = originalSelectedText.substring(originalSelectedText.indexOf(coreText) + coreText.length);

            const formattedText = `${prefix}${coreText}${suffix}`;
            markdownInput.value = `${textBeforeSelection}${leadingSpaceInSelection}${formattedText}${trailingSpaceInSelection}${textAfterSelection}`;
            
            // Select the formatted core text
            const newSelectionStart = textBeforeSelection.length + leadingSpaceInSelection.length + prefix.length;
            const newSelectionEnd = newSelectionStart + coreText.length;
            markdownInput.setSelectionRange(newSelectionStart, newSelectionEnd);
        } else {
            // No text selected, or selection is only whitespace: insert with placeholder
            const textToInsert = `${prefix}${placeholder}${suffix}`;
            markdownInput.value = `${textBeforeSelection}${textToInsert}${textAfterSelection}`;
            
            const placeholderStart = start + prefix.length;
            const placeholderEnd = placeholderStart + placeholder.length;
            markdownInput.setSelectionRange(placeholderStart, placeholderEnd);
        }
        
        markdownInput.focus();
        updatePreview(); // Update preview immediately after applying format
    }

    // Event listeners for toolbar buttons
    toolbarBold?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("**", "**", "bold text"); });
    toolbarItalic?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("*", "*", "italic text"); });
    toolbarH1?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n# ", "\n", "Heading 1"); });
    toolbarH2?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n## ", "\n", "Heading 2"); });
    toolbarH3?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n### ", "\n", "Heading 3"); });
    toolbarUL?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n- ", "", "List item"); });
    toolbarOL?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n1. ", "", "List item"); });
    toolbarLink?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("[", "](url)", "Link text"); });
    toolbarImage?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("![", "](alt text)", "Image"); });
    toolbarCodeBlock?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n```\n", "\n```\n", "code"); });
    toolbarBlockquote?.addEventListener("click", (event) => { event.preventDefault(); applyMarkdownFormatting("\n> ", "", "Quoted text"); });
    toolbarHelp?.addEventListener("click", (event) => {
        event.preventDefault();
        window.open('https://guides.github.com/features/mastering-markdown/', '_blank');
    });

    if (
        form instanceof HTMLFormElement &&
        saveButton instanceof HTMLButtonElement &&
        feedbackMessage instanceof HTMLElement
    ) {
        form.addEventListener("submit", async (event) => {
            event.preventDefault();
            saveButton.disabled = true;
            saveButton.textContent = "Saving...";
            feedbackMessage.textContent = "";

            const formData = new FormData(form);
            const updatedFrontmatter = JSON.parse(
                JSON.stringify(initialFrontmatter || {}),
            );
            const updatedBody = formData.get("body"); // FormDataEntryValue | null

            for (const [key] of formData.entries()) {
                // Iterate only keys, get value from form.elements or formData
                if (key !== "body") {
                    const formElement = form.elements.namedItem(key);
                    const formValue = formData.get(key); // FormDataEntryValue

                    if (
                        formElement instanceof HTMLInputElement &&
                        formElement.type === "checkbox"
                    ) {
                        updatedFrontmatter[key] = formElement.checked;
                    } else if (typeof initialFrontmatter[key] === "number") {
                        updatedFrontmatter[key] =
                            typeof formValue === "string"
                                ? parseFloat(formValue) || 0
                                : 0;
                    } else if (
                        key === "tags" &&
                        typeof formValue === "string"
                    ) {
                        updatedFrontmatter[key] = formValue
                            .split(",")
                            .map((tag) => tag.trim())
                            .filter((tag) => tag !== "");
                    } else {
                        // For other types (string, date string from ISO), assign the string value from FormData
                        updatedFrontmatter[key] =
                            typeof formValue === "string" ? formValue : "";
                    }
                }
            }

            if (
                contentType === "draft" &&
                updatedFrontmatter.hasOwnProperty("slug")
            ) {
                updatedFrontmatter.slug = slugToSave;
            }
            if (contentType === "published") {
                updatedFrontmatter.slug = slugToSave;
                delete updatedFrontmatter.draft;
            }

            const endpoint =
                contentType === "published"
                    ? `/api/admin/content/save-published-post`
                    : `/api/admin/content/save-draft`;

            try {
                const response = await fetch(endpoint, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        slug: slugToSave,
                        frontmatter: updatedFrontmatter,
                        body:
                            typeof updatedBody === "string" ? updatedBody : "", // Ensure body is string
                    }),
                });
                const resultText = await response.text();
                let result;
                try {
                    result = JSON.parse(resultText);
                } catch (e) {
                    if (!response.ok)
                        throw new Error(
                            resultText ||
                                "Failed to save. Server returned non-JSON response.",
                        );
                    result = {
                        message:
                            resultText ||
                            "Saved successfully (non-JSON response).",
                    };
                }
                if (response.ok) {
                    feedbackMessage.textContent =
                        result.message || "Saved successfully!";
                    feedbackMessage.className = "text-green-500";
                    setTimeout(() => {
                        window.location.href =
                            contentType === "published"
                                ? `/admin/content?view=published`
                                : "/admin/content?view=drafts";
                    }, 1500);
                } else {
                    throw new Error(result.message || "Failed to save.");
                }
            } catch (err) {
                feedbackMessage.textContent = `Error: ${err.message}`;
            }
        });
    }

    if (
        aiSuggestButton instanceof HTMLButtonElement &&
        aiSuggestionsArea instanceof HTMLElement &&
        aiSuggestionsText instanceof HTMLElement &&
        form instanceof HTMLFormElement
    ) {
        aiSuggestButton.addEventListener("click", async (event) => {
            event.preventDefault();
            aiSuggestButton.disabled = true;
            aiSuggestButton.textContent = "Getting suggestions...";
            aiSuggestionsArea.classList.remove("hidden");
            aiSuggestionsText.textContent = "";

            const formData = new FormData(form);
            const updatedFrontmatter = JSON.parse(
                JSON.stringify(initialFrontmatter || {}),
            );
            const updatedBody = formData.get("body"); // FormDataEntryValue | null

            for (const [key] of formData.entries()) {
                // Iterate only keys, get value from form.elements or formData
                if (key !== "body") {
                    const formElement = form.elements.namedItem(key);
                    const formValue = formData.get(key); // FormDataEntryValue

                    if (
                        formElement instanceof HTMLInputElement &&
                        formElement.type === "checkbox"
                    ) {
                        updatedFrontmatter[key] = formElement.checked;
                    } else if (typeof initialFrontmatter[key] === "number") {
                        updatedFrontmatter[key] =
                            typeof formValue === "string"
                                ? parseFloat(formValue) || 0
                                : 0;
                    } else if (
                        key === "tags" &&
                        typeof formValue === "string"
                    ) {
                        updatedFrontmatter[key] = formValue
                            .split(",")
                            .map((tag) => tag.trim())
                            .filter((tag) => tag !== "");
                    } else {
                        // For other types (string, date string from ISO), assign the string value from FormData
                        updatedFrontmatter[key] =
                            typeof formValue === "string" ? formValue : "";
                    }
                }
            }

            if (
                contentType === "draft" &&
                updatedFrontmatter.hasOwnProperty("slug")
            ) {
                updatedFrontmatter.slug = slugToSave;
            }
            if (contentType === "published") {
                updatedFrontmatter.slug = slugToSave;
                delete updatedFrontmatter.draft;
            }

            const endpoint =
                contentType === "published"
                    ? `/api/admin/content/save-published-post`
                    : `/api/admin/content/save-draft`;

            try {
                const response = await fetch(endpoint, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        slug: slugToSave,
                        frontmatter: updatedFrontmatter,
                        body:
                            typeof updatedBody === "string" ? updatedBody : "", // Ensure body is string
                    }),
                });
                const resultText = await response.text();
                let result;
                try {
                    result = JSON.parse(resultText);
                } catch (e) {
                    if (!response.ok)
                        throw new Error(
                            resultText ||
                                "Failed to save. Server returned non-JSON response.",
                        );
                    result = {
                        message:
                            resultText ||
                            "Saved successfully (non-JSON response).",
                    };
                }
                if (response.ok) {
                    aiSuggestionsText.textContent =
                        result.message || "Suggestions received!";
                    aiSuggestionsText.className = "text-green-500";
                } else {
                    throw new Error(
                        result.message || "Failed to get suggestions.",
                    );
                }
            } catch (err) {
                aiSuggestionsText.textContent = `Error: ${err.message}`;
            } finally {
                aiSuggestButton.disabled = false;
                aiSuggestButton.textContent = "Get AI Suggestions";
            }
        });
    }
</script>
