---
import type { CollectionEntry } from "astro:content";

interface Props {
    prevPost?: CollectionEntry<"blog">;
    nextPost?: CollectionEntry<"blog">;
    isSectionNav?: boolean;
}

const { prevPost, nextPost, isSectionNav = false } = Astro.props;

// Type-safe access to optional section property
type BlogData = CollectionEntry<"blog">["data"];
type BlogDataWithSection = BlogData & { section?: string };

const getPrevSection = () => {
    const data = prevPost?.data as BlogDataWithSection;
    return data?.section || "";
};

const getNextSection = () => {
    const data = nextPost?.data as BlogDataWithSection;
    return data?.section || "";
};
---

<nav class="post-navigation">
    <div class="nav-links">
        {
            prevPost && (
                <a href={`/blog/${prevPost.id}`} class="prev-post">
                    <span class="nav-arrow">←</span>
                    <div class="nav-info">
                        <span class="nav-label">
                            Previous
                            {isSectionNav && getPrevSection()
                                ? " in " + getPrevSection()
                                : ""}
                        </span>
                        <span class="nav-title">{prevPost.data.title}</span>
                    </div>
                </a>
            )
        }

        {!prevPost && <div class="nav-empty" />}

        {
            nextPost && (
                <a href={`/blog/${nextPost.id}`} class="next-post">
                    <div class="nav-info">
                        <span class="nav-label">
                            Next
                            {isSectionNav && getNextSection()
                                ? " in " + getNextSection()
                                : ""}
                        </span>
                        <span class="nav-title">{nextPost.data.title}</span>
                    </div>
                    <span class="nav-arrow">→</span>
                </a>
            )
        }

        {!nextPost && <div class="nav-empty" />}
    </div>
</nav>

<style>
    .post-navigation {
        margin-top: 4rem;
        padding-top: 2rem;
        border-top: 1px solid rgba(var(--gray-light), 50%);
    }

    .nav-links {
        display: flex;
        justify-content: space-between;
        gap: 1rem;
    }

    .prev-post,
    .next-post {
        display: flex;
        align-items: center;
        max-width: 48%;
        text-decoration: none;
        color: var(--accent);
        padding: 0.75rem;
        border-radius: 8px;
        transition: background-color 0.3s ease;
    }

    .prev-post:hover,
    .next-post:hover {
        background-color: rgba(var(--gray-light), 30%);
    }

    .nav-arrow {
        font-size: 1.5rem;
        font-weight: bold;
        margin: 0 0.5rem;
    }

    .nav-info {
        display: flex;
        flex-direction: column;
    }

    .nav-label {
        font-size: 0.8rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: rgb(var(--gray));
    }

    .nav-title {
        font-weight: 500;
        max-width: 100%;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .next-post {
        text-align: right;
        flex-direction: row-reverse;
    }

    .next-post .nav-info {
        align-items: flex-end;
    }

    .nav-empty {
        width: 48%;
    }

    /* Responsive adjustments */
    @media (max-width: 640px) {
        .post-navigation {
            margin-top: 3rem;
            padding-top: 1.5rem;
        }

        .nav-links {
            flex-direction: column;
            gap: 1rem;
        }

        .prev-post,
        .next-post,
        .nav-empty {
            max-width: 100%;
            width: 100%;
        }

        .nav-label {
            font-size: 0.7rem;
        }

        .nav-title {
            font-size: 0.9rem;
        }
    }
</style>
