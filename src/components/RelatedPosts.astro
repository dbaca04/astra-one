---
import type { RelatedPost } from "../utils/relatedPosts";

interface Props {
    relatedPosts: RelatedPost[];
    title?: string;
}

const { relatedPosts, title = "Related Posts" } = Astro.props;
---

{
    relatedPosts && relatedPosts.length > 0 && (
        <section class="my-8">
            <h2 class="text-2xl font-semibold mb-4 text-theme-text">{title}</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {relatedPosts.map((post) => {
                    // Extract slug from URL for transition naming
                    const postSlug =
                        post.url.split("/").filter(Boolean).pop() || "";
                    return (
                        <article
                            class="p-4 border border-theme-border rounded-lg shadow-DEFAULT hover:shadow-hover transition-shadow bg-theme-card-bg"
                            transition:animate="fade"
                        >
                            <a href={post.url} class="block">
                                {post.heroImage && (
                                    <div
                                        class="overflow-hidden mb-3 rounded-md aspect-video"
                                        transition:name={`hero-image-${postSlug}`}
                                    >
                                        <img
                                            src={
                                                typeof post.heroImage ===
                                                "string"
                                                    ? post.heroImage
                                                    : (post.heroImage as any)
                                                          .src || ""
                                            }
                                            alt={post.title}
                                            class="w-full h-full object-cover"
                                        />
                                    </div>
                                )}
                                <h3
                                    class="text-xl font-medium mb-2 text-theme-accent hover:text-theme-accent-dark hover:underline"
                                    transition:name={`title-${postSlug}`}
                                >
                                    {post.title}
                                </h3>
                                {post.date && (
                                    <p class="text-sm text-theme-text opacity-80 mb-2">
                                        {new Date(post.date).toLocaleDateString(
                                            "en-US",
                                            {
                                                year: "numeric",
                                                month: "long",
                                                day: "numeric",
                                            },
                                        )}
                                    </p>
                                )}
                            </a>
                        </article>
                    );
                })}
            </div>
        </section>
    )
}

<style>
    /* Scoped styles can be added here if Tailwind isn't sufficient for some specific needs */
    /* For now, relying on Tailwind utility classes that map to CSS variables */
</style>
